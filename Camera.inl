#if !defined( GLX_CAMERA_INL_INCLUDED )
#define GLX_CAMERA_INL_INCLUDED

#pragma once

/** @file *//********************************************************************************************************

                                                      Camera.inl

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Glx/Camera.inl#8 $

	$NoKeywords: $

 ********************************************************************************************************************/

#include "Camera.h"

#include "Math/Constants.h"

#include <cassert>

namespace Glx
{


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Camera::Camera( GLfloat angleOfView,
					   GLfloat nearDistance, GLfloat farDistance,
					   Vector3 const & position,
					   Quaternion const & orientation	/*= Quaternion::Identity()*/ )
	: m_AngleOfView( angleOfView ),
	m_NearDistance( nearDistance ),
	m_FarDistance( farDistance ),
	m_Frame( position, orientation )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Camera::Camera( GLfloat angleOfView,
					   GLfloat nearDistance, GLfloat farDistance,
					   Frame const & frame/* = Frame::Identity()*/ )
	: m_AngleOfView( angleOfView ),
	m_NearDistance( nearDistance ),
	m_FarDistance( farDistance ),
	m_Frame( frame )
{
}

/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Camera::~Camera()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetFrame( Frame const & frame )
{
	m_Frame = frame;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Frame Camera::GetFrame() const
{
	return m_Frame;
}

/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetPosition( Vector3 const & position )
{
	m_Frame.SetTranslation( position );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Camera::GetPosition() const
{
	return m_Frame.GetTranslation();
}



/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetOrientation( Quaternion const & orientation )
{
	m_Frame.SetRotation( orientation );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Quaternion Camera::GetOrientation() const
{
	return m_Frame.GetRotation();
}

/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetNearDistance( GLfloat nearDistance )
{
	m_NearDistance = nearDistance;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline GLfloat Camera::GetNearDistance() const
{
	return m_NearDistance;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetFarDistance( GLfloat farDistance )
{
	m_FarDistance = farDistance;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline GLfloat Camera::GetFarDistance() const
{
	return m_FarDistance;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::SetAngleOfView( GLfloat angle )
{
	m_AngleOfView = angle;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline GLfloat Camera::GetAngleOfView() const
{
	return m_AngleOfView;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Matrix44 const & Camera::GetProjectionMatrix() const
{
	return m_ProjectionMatrix;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::Turn( Quaternion const & rotation )
{
	m_Frame.Rotate( rotation );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

/// @param	angle	Angle of rotation (degrees)
/// @param	axis	Axis of rotation

inline void Camera::Turn( GLfloat angle, Vector3 const & axis )
{
	Turn( Quaternion( axis, Math::ToRadians( angle ) ) );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Camera::Move( Vector3 const & distance )
{
	m_Frame.Translate( distance );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Camera::GetDirection() const
{
	return -m_Frame.GetZAxis();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Camera::GetUp() const
{
	return m_Frame.GetYAxis();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Camera::GetRight() const
{
	return m_Frame.GetXAxis();
}


///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline DirectionUpCamera::DirectionUpCamera( GLfloat angleOfView, GLfloat nearDistance, GLfloat farDistance,
//					   Vector3 const & position	/*= Vector3::Origin()*/,
//					   Vector3 const & direction	/*= -Vector3::ZAxis()*/,
//					   Vector3 const & up			/*= Vector3::YAxis()*/ )
//	: Camera( angleOfView, nearDistance, farDistance, position )	
//{
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline DirectionUpCamera::~DirectionUpCamera()
//{
//}
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline EulerCamera::EulerCamera( GLfloat angleOfView, GLfloat nearDistance, GLfloat farDistance,
//								 Vector3 const & position	/*= Vector3::Origin()*/,
//								 GLfloat yaw /*= 0.f*/, GLfloat pitch /*= 0.f*/, GLfloat roll /*= 0.f*/ )
//	: Camera( angleOfView, nearDistance, farDistance, position,
//			  Quaternion( Math::ToRadians( yaw ), Math::ToRadians( pitch ), Math::ToRadians( roll ) ) )
//{
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline EulerCamera::~EulerCamera()
//{
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline void EulerCamera::Yaw( float angle )
//{
//	Camera::Turn( angle, Vector3::YAxis() );
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline void EulerCamera::Pitch( float angle )
//{
//	Camera::Turn( angle, Vector3::XAxis() );
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline void EulerCamera::Roll( float angle )
//{
//	Camera::Turn( angle, Vector3::ZAxis() );
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline void EulerCamera::Turn( GLfloat yaw, GLfloat pitch, GLfloat roll )
//{
//	Camera::Turn( Quaternion( Math::ToRadians( yaw ), Math::ToRadians( pitch ), Math::ToRadians( roll ) ) );
//}
//
//
///********************************************************************************************************************/
///*																													*/
///*																													*/
///********************************************************************************************************************/
//
//inline void EulerCamera::SetOrientation( GLfloat yaw, GLfloat pitch, GLfloat roll )
//{
//	Camera::SetOrientation( Quaternion( Math::ToRadians( yaw ), Math::ToRadians( pitch ), Math::ToRadians( roll ) ) );
//}




} // namespace Glx

#endif // !defined( GLX_CAMERA_INL_INCLUDED )
