#if !defined( GLX_FRAME_INL_INCLUDED )
#define GLX_FRAME_INL_INCLUDED

#pragma once

/** @file *//********************************************************************************************************

                                                      Frame.inl

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Glx/Frame.inl#5 $

	$NoKeywords: $

 ********************************************************************************************************************/

#include "Frame.h"

#include "Math/Constants.h"
#include "Math/Matrix43.h"
#include "Math/Matrix33.h"
#include "Math/Vector3.h"
#include "Math/Quaternion.h"

#include <cassert>


namespace Glx
{


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Frame::Frame()
	: m_M( Matrix43::Identity() )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Frame::Frame( Vector3 const &	position,
					 Quaternion const &	orientation,
					 Vector3 const &	scale			/* = Vector3( 1., 1., 1. )*/ )
	: m_M( Matrix43::Identity() )
{
	Translate( position );
	Rotate( orientation );
	Scale( scale );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

/// @note	Frames may not have a scale of 0 along any axis.

inline Frame::Frame( Matrix43 const & m )
{
	assert( !Math::IsCloseToZero( m.GetX().Length2(), 2.*Math::DEFAULT_FLOAT_TOLERANCE ) );
	assert( !Math::IsCloseToZero( m.GetY().Length2(), 2.*Math::DEFAULT_FLOAT_TOLERANCE ) );
	assert( !Math::IsCloseToZero( m.GetZ().Length2(), 2.*Math::DEFAULT_FLOAT_TOLERANCE ) );

	m_M = m;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline void Frame::SetRotation( Quaternion const & r )
{
	SetRotationMatrix( r.GetRotationMatrix33() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Quaternion Frame::GetRotation() const
{
	return Quaternion( Matrix33( GetRotationMatrix() ) ).Normalize();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Matrix43 const & Frame::GetTransformationMatrix() const
{
	return m_M;
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Frame::GetXAxis() const
{
	return Vector3( m_M.m_Xx, m_M.m_Xy, m_M.m_Xz ).Normalize();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Frame::GetYAxis() const
{
	return Vector3( m_M.m_Yx, m_M.m_Yy, m_M.m_Yz ).Normalize();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Vector3 Frame::GetZAxis() const
{
	return Vector3( m_M.m_Zx, m_M.m_Zy, m_M.m_Zz ).Normalize();
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

inline Frame Frame::Identity()
{
	return Frame();
}


} // namespace Glx



#endif // !defined( GLX_FRAME_INL_INCLUDED )
