/** @file *//********************************************************************************************************

                                                     Viewport.inl

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Glx/Viewport.inl#4 $

	$NoKeywords: $

 ********************************************************************************************************************/

#pragma once

#include "Viewport.h"

#include "Rect/Rect.h"
#include "Glx/Camera.h"

namespace Glx
{


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Viewport::Viewport( GLint x, GLint y, GLsizei w, GLsizei h, Camera * pCamera/* = 0*/ )
	: m_Rect( x, y, w, h ),
	m_pCamera( pCamera )
{
	Reshape();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Rect const & Viewport::Reshape() const
{
	glViewport( GLint( m_Rect.m_X ), GLint( m_Rect.m_Y ),
				GLsizei( m_Rect.m_Width ), GLsizei( m_Rect.m_Height ) );

	if ( m_pCamera )
	{
		m_pCamera->Reshape( GLsizei( m_Rect.m_Width ), GLsizei( m_Rect.m_Height ) );
	}

	return m_Rect;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Rect const & Viewport::Reshape( GLint x, GLint y, GLsizei w, GLsizei h )
{
	m_Rect = Rect( x, y, w, h );

	Reshape();

	return Reshape();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Rect const & Viewport::Reshape( GLsizei w, GLsizei h )
{
	m_Rect.m_Width	= w;
	m_Rect.m_Height	= h;

	return Reshape();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Rect const & Viewport::Move( GLint x, GLint y )
{
	m_Rect.m_X	= x;
	m_Rect.m_Y	= y;

	return Reshape();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline float Viewport::GetAspectRatio() const
{
	return float( m_Rect.m_Width ) / float( m_Rect.m_Height );
}



} // namespace Glx
